rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    
    // Helper functions
    function isAuthenticated() {
      return request.auth != null;
    }
    
    function getUserRole() {
      return get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role;
    }
    
    function isAdmin() {
      return isAuthenticated() && getUserRole() == 'admin';
    }
    
    function isTeacher() {
      return isAuthenticated() && getUserRole() == 'teacher';
    }
    
    function isStudent() {
      return isAuthenticated() && getUserRole() == 'student';
    }
    
    function isAdminOrTeacher() {
      return isAdmin() || isTeacher();
    }
    
    // Users collection
    match /users/{userId} {
      // Users can read their own data
      allow read: if isAuthenticated() && request.auth.uid == userId;
      
      // Only the user themselves can create their profile (during registration)
      allow create: if isAuthenticated() && request.auth.uid == userId;
      
      // Users can update their own profile (name and fcmToken, not email/role/uid/isActive)  
      allow update: if isAuthenticated() && request.auth.uid == userId 
                    && request.resource.data.role == resource.data.role
                    && request.resource.data.uid == resource.data.uid
                    && request.resource.data.email == resource.data.email
                    && (
                      // isActive must not change (or doesn't exist in old data)
                      !('isActive' in resource.data) 
                      || request.resource.data.isActive == resource.data.isActive
                    );
      
      // Admin can read all users
      allow read: if isAdmin();
      
      // Admin can create users with any role
      allow create: if isAdmin();
      
      // Admin can update user status (deactivate/activate)
      allow update: if isAdmin();
      
      // Admin can delete users (but not themselves)
      allow delete: if isAdmin() && request.auth.uid != userId;
    }
    
    // Courses collection
    match /courses/{courseId} {
      // Anyone authenticated can read courses
      allow read: if isAuthenticated();
      
      // Only admin and teacher can create courses
      allow create: if isAdminOrTeacher();
      
      // Only admin and teacher can update/delete courses
      allow update, delete: if isAdminOrTeacher();
      
      // Classes subcollection
      match /classes/{classId} {
        // Anyone authenticated can read classes
        allow read: if isAuthenticated();
        
        // Only admin and teacher can create/update/delete classes
        allow create, update, delete: if isAdminOrTeacher();
        
        // Attendance subcollection
        match /attendance/{attendanceId} {
          // Admin and teachers can read all attendance
          allow read: if isAdminOrTeacher();
          
          // Students can read their own attendance
          allow read: if isAuthenticated() && attendanceId == request.auth.uid;
          
          // Students can only mark their own attendance
          allow create: if isStudent() 
                        && attendanceId == request.auth.uid
                        && request.resource.data.studentId == request.auth.uid;
          
          // Admin and teachers can manage attendance, students cannot update/delete
          allow update: if isAdminOrTeacher();
          allow delete: if isAdminOrTeacher();
        }
      }
    }
    
    // Collection group query for attendance (for student stats)
    match /{path=**}/attendance/{attendanceId} {
      // Students can read their own attendance records across all classes
      allow read: if isAuthenticated() && 
                     resource.data.studentId == request.auth.uid;
      
      // Admin and teachers can read all attendance
      allow read: if isAdmin() || isTeacher();
    }
  }
}

